(check-principal-type 1 int)
(check-principal-type #f bool)
(check-principal-type 'abc sym)
(check-principal-type '(1 2 3) (list int))
(check-type-error '(1 #t))
(check-principal-type (if #t 2 3) int)
(check-type-error (if 1 1 1))
(check-type-error (if #t 1 #t))
(check-principal-type (begin 1 2 3 #t) bool)
(check-principal-type (let ([x 1] [y 2]) (+ x y)) int)
(check-principal-type (let ([x #t] [y 3]) (if x y (- y 1))) int)
(check-principal-type (lambda (x y) (- x y)) (int int -> int))
(check-principal-type (letrec
                        ([add (lambda (x y) (+ x y))])
                        (add 1 2))
                      int)
(check-type-error (lambda (x y z) (cons x y z)))
(check-type-error (lambda (x y z) (+ x y z)))
(check-type-error (+ 1 #t))
(check-type-error (lambda (x) (cons x x)))
