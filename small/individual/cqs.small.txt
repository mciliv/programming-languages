
 1. *Receivers, arguments, and messages.*
    Read the first seven pages of chapter 10, through section 10.1.3.
    Now examine these expressions from the definition of class
    `Tikzpicture`, which should be below Figure 10.3 on page 676:

        (div: w 2)
        (drawOn: shape self)
        (do: shapes [block (shape) (drawOn: shape self)])

    In each expression, please identify the *receiver*, the
    *argument*, and the *message*:

    > In `(div: w 2)`,
    >
    >   - The receiver is w
    >   - The argument is 2
    >   - The message is div

    > In `(drawOn: shape self)`,
    >
    >   - The receiver is shape
    >   - The argument is self
    >   - The message is drawOn

    > In `(do: shapes [block (shape) (drawOn: shape self)])`, 
    >
    >   - The receiver is shapes
    >   - The argument is [block (shape) (drawOn: shape self)]
    >   - The message is do


 2. *Colons in method names*.
    Continuing with the analysis of `Tikzpicture`, in both the
    protocol and the implementation, method `add:` has one colon in
    the name, method `draw` has no colons in the name, and the method
    `drawEllipseAt:width:height:` has three colons in the name.

      - What, if anything, does the number of colons have to do with
        *receivers*? 

        Your answer: Nothing

      - What, if anything, does the number of colons have to do with
        *arguments*? 

        Your answer: It represents the number of arguments

    If you need to, review the presentation in section 10.1.1 
    on "Objects and Messages," which shows messages sent to shapes.


 3. *Class protocols and instance protocols.*
    Every *message* is part of some *protocol*.  As example messages,
    study the transcript in code chunks 671e and 672, which
    puts three shapes into a picture and then draws the picture.

    (a) Of the messages used in the transcript, which ones are part of
        the _class_ protocol for `Tikzpicture`, and which are part of
        the _instance_ protocol?

        empty is part of the _class_ protocol for `Tikzpicture`

        add is part of the _instance_ protocol for `Tikzpicture`

    (b) In general, what do you do with messages in a _class_
        protocol, and how does that differ from what you do with
        messages in an _instance_ protocol?

        Messages in a _class_ protocol are sent to the class while messages
        in an _instance_ protocol are sent to an instance of the class and
        must be given the instance as the first parameter to the message.

 4. *Dynamic dispatch, part I: a toy class*.
    For the mechanisms of message send and dynamic dispatch, read
    section 10.3.4, which starts on page 689.  Using the class definitions
    in that section, message `m1` is sent to an object of class `C`.
    What method *definitions* are dispatched to, in what order?

    Please edit this answer to put in the correct methods and classes:

      - Dispatch to method m1 on class B
      - Dispatch to method m2 on class C



 5. *Dynamic dispatch, part II: number classes.*
    Study the implementation of class `Number`, which starts around page 745.
    Now study the implementation of class `Fraction`, which starts around
    page 749.

    When message `-` (minus) is sent to `Fraction` `(/ 1 2)` with argument
    `Fraction` `(/ 1 3)`, what methods are executed, and in what order?

    Please edit this answer to put in the correct methods and classes:

      - Dispatch to method - on class Fraction
      - Dispatch to method + on class Fraction

    You are getting ready for exercise 39(a). 


 6. *Dynamic dispatch, part III: messages to `self` and `super`.*
    Now study the *class* method `new` defined on class `List`, which
    appears just after page 739.  The definition sends message `new` 
    to `super`.  (Keep in mind: because `new` is a *class* method, both
    `super` and `self` stand for the class, not for any instance.)

    (a) When *class* method `new` is executed, what three messages
        are sent by the method body, in what order?  (If you like, you
        can also study the message trace shown above, but it may be
        simpler just to look at the source code.)

sentinel is called then new as the receiver then the second new

    (b) What does each of the three message sends accomplish?


1st new  => this new is called on super which allocates space for the
            instance as defined by the class itself and its super
            classes
2nd new  => this new is called on ListSentinel, so it creates a new
            ListSentinel object instance
sentinel => initializes the new list with the new sentinel and returns
            the list instance

             and the sentinel of this list
            is set to that instance.

    (c) If we change `new`'s definition so instead of `(new super)` it 
        says `(new self)`, which of the following scenarios best describes
        how the changed program behaves?

        1) The `new` message will be dispatched to class `List`.
           The same method will run again, and the computation will
           not terminate.

        2) The `new` message will be dispatched to a different class,
           and the reply to the `new` message will leave the sentinel
           pointing to the wrong value.

        3) Nothing will change; in this example, there's no
           difference between `(new super)` and `(new self)`.

        Your answer: The best description is scenario number ?

        1 is the best description.

 7. *Design of the numeric classes.*
    Read about coercion in section 10.4.6 on page 707.
    Look at the last part of the instance protocol for `Number` on page 706.
    Explain the roles of the methods `asInteger`, `asFraction`,
    `asFloat`, and `coerce:`.  If you are unsure, look at the
    implementations of these methods on class `Integer`, starting
    on page 747.


    > The role of `asInteger` is to answer the integer nearest to the value of
      the receiver.

    > The role of `asFraction` is to answer the fraction nearest to the value 
      of the receiver.

    > The role of `asFloat` is is to answer the float nearest to the value
      of the receiver.

    > The role of `coerce:` is answer a number that is of the same kind as the
      receiver, but represents the same value as the argument.


    You are ready to implement mixed arithmetic, with coercions, in exercise 44.



 8. *Abstract classes in principle.*
    In section 10.10.1, which starts on page 792 ("Key words and phrases"),
    you will find a short definition of "abstract class."  What is the
    *purpose* of an abstract class?  Pick one of the responses below.

    (a) To hide the representation of instances so programmers can
        change internal details without affecting client code

    (b) To define methods that other classes inherit, so that
        subclasses get useful default methods

    (c) The same as the purpose of a regular class: to define an abstraction

    Your answer: b

 9. *Abstract classes in practice: magnitudes and numbers.*
    Your natural-number class will inherit from abstract class
    `Magnitude`, and your big-integer code will inherit from
    `Magnitude` and from `Number`, which is also an abstract class.

    (a) Study the implementation of class `Magnitude`; it is the first
        dozen lines of code in section 10.6.6, which starts on page 745. 
        List all the methods that are “subclass responsibility”:

            Your answer: =, <

        These are methods that you must implement in both your
        `Natural` class and your large-integer classes.

    (b) The very next class definition is the definition of abstract
        class `Number`.  Read the first code chunk and again, list all
        the methods that are “subclass responsibility”:

            Your answer: +, *, negated, reciprocal, asInteger, asFraction,
                         asFloat, coerce:

        These are the methods that you must implement in your
        large-integer classes.  (Two of them, `+` and `*`, must also
        be implemented in class `Natural`.)

    You are getting ready to implement large integers.

10. *Double Dispatch*.
    Read section 10.6.5, which starts on page 744.
    Of the methods listed in the previous question, list each one that
    needs to know *either* of the following facts about its *argument*
    (not its receiver):

      - Whether the argument is large or small
      - If the argument is large, whether it is "positive" or "negative"

    For example, `+` is such a method.

    (a) Please list all such methods here:

        My answer: +, *, =, <, coerce:


    (b) The methods in part (a) are exactly the ones that require
        double dispatch.  The implementation of each such method sends
        a message to its *argument*, and the exact message depends on
        the class of the *receiver*.  

        Assume that the receiver is a `LargePositiveInteger`.  Please
        say, for each method in part (a), what message the method
        implementation sends to the argument.

        Your answer:

        > Method `+` sends `addLargePositiveIntegerTo:` to the argument  
        > Method `*` sends `0:` to the argument
        > Method `=` sends `equalToLargePositiveInteger` to the argument
        > Method `<` sends `lessThanLargePositiveInteger` to the argument
        > Method `coerce:` sends `asLargePositiveInteger` to the argument
        

    You are ready to implement large integers (exercise 43).





